# Generated by CodiumAI
import pytest

from helpo.hcollections import clean_list_via_rm_patts


class TestCleanListViaRmPatts:
    # Should remove elements that contain specified patterns
    def test_remove_elements_with_patterns_noempty_lines(self):
        input_list = ["Hello", "World", "", "Hello, World"]
        rm_patts = ["World"]
        expected_output = ["Hello"]

        result = clean_list_via_rm_patts(input_list, rm_patts, rm_empty_instrs=True)

        assert (
            result == expected_output
        ), "Failed to remove elements with specified patterns and rm empty lines"

    def test_remove_elements_with_patterns_plusempty_lines(self):
        input_list = ["Hello", "World", "", "Hello, World"]
        rm_patts = ["World"]
        expected_output = ["Hello", ""]

        result = clean_list_via_rm_patts(input_list, rm_patts, rm_empty_instrs=False)

        assert (
            result == expected_output
        ), "Failed to remove elements with specified patterns and leave empty lines"

    # Should remove empty elements when rm_empty_instrs is True
    def test_remove_empty_elements(self):
        input_list = ["Hello", "World", "", "Hello, World"]
        rm_patts = []
        expected_output = ["Hello", "World", "Hello, World"]

        result = clean_list_via_rm_patts(input_list, rm_patts, rm_empty_instrs=True)

        assert result == expected_output, "Failed to remove empty elements"

    # Should return original list with no empty lines when rm_patts is empty
    def test_return_original_list_when_rm_patts_empty_noempty_lines(self):
        input_list = ["Hello", "World", "", "Hello, World"]
        rm_patts = []

        result = clean_list_via_rm_patts(input_list, rm_patts, rm_empty_instrs=True)

        assert result == [
            "Hello",
            "World",
            "Hello, World",
        ], "Failed to return original list when rm_patts is empty no empty lines"

    def test_return_original_list_when_rm_patts_empty_plusempty_lines(self):
        input_list = ["Hello", "World", "", "Hello, World"]
        rm_patts = []

        result = clean_list_via_rm_patts(input_list, rm_patts, rm_empty_instrs=False)

        assert result == [
            "Hello",
            "World",
            "",
            "Hello, World",
        ], "Failed to return original list when rm_patts is empty plus empty lines"

    # Should return empty list when input_list is empty
    def test_return_empty_list_when_input_list_empty(self):
        input_list = []
        rm_patts = ["World"]

        result = clean_list_via_rm_patts(input_list, rm_patts)

        assert result == [], "Failed to return empty list when input_list is empty"

    # Should return original list when no element contains specified patterns
    def test_return_original_list_when_no_element_contains_patterns(self):
        input_list = ["Hello", "World", "", "Hello, World"]
        rm_patts = ["Pattern1", "Pattern2"]
        expected_output = ["Hello", "World", "Hello, World"]

        result = clean_list_via_rm_patts(input_list, rm_patts)

        assert (
            result == expected_output
        ), "Failed to return original list when no element contains specified patterns"

    # Should remove elements that contain specified patterns with non-ASCII characters
    def test_remove_elements_with_non_ascii_patterns(self):
        input_list = ["Hello", "World", "", "Hello, World", "Привет"]
        rm_patts = ["World", "Привет"]
        expected_output = ["Hello"]

        result = clean_list_via_rm_patts(input_list, rm_patts)

        assert (
            result == expected_output
        ), "Failed to remove elements with non-ASCII patterns"

    # Should remove elements that contain specified patterns with escape characters
    def test_remove_elements_with_escape_characters(self):
        input_list = ["Hello\n", "World", "", "Hello, World"]
        rm_patts = ["Hello, World"]
        expected_output = ["Hello\n", "World"]

        result = clean_list_via_rm_patts(input_list, rm_patts)

        assert (
            result == expected_output
        ), "Failed to remove elements with escape characters"

    # Should remove elements that contain specified patterns with whitespace characters
    def test_remove_elements_with_whitespace_characters(self):
        input_list = ["Hello", "World", "", "Hello, World"]
        rm_patts = ["World"]
        expected_output = ["Hello", ""]

        result = clean_list_via_rm_patts(input_list, rm_patts, rm_empty_instrs=False)

        assert (
            result == expected_output
        ), "Failed to remove elements with whitespace characters"

    # Should remove elements that contain specified patterns with special characters
    def test_remove_elements_with_special_characters(self):
        input_list = ["Hello", "World", "", "Hello*, World"]
        rm_patts = ["Hello*,"]
        expected_output = ["Hello", "World"]

        result = clean_list_via_rm_patts(input_list, rm_patts, rm_empty_instrs=True)

        assert (
            result == expected_output
        ), "Failed to remove elements with specified patterns containing special characters"

    # Should remove elements that contain specified patterns with numbers
    def test_remove_elements_with_numbers(self):
        input_list = ["Hello", "World", "123", "Hello, World"]
        rm_patts = ["123"]
        expected_output = ["Hello", "World", "Hello, World"]

        result = clean_list_via_rm_patts(input_list, rm_patts)

        assert (
            result == expected_output
        ), "Failed to remove elements with specified patterns containing numbers"

    # Should remove elements that contain specified patterns with leading/trailing whitespaces
    def test_remove_elements_with_patterns(self):
        input_list = ["Hello", "World", "", "Hello, World"]
        rm_patts = ["World"]
        expected_output = ["Hello"]

        result = clean_list_via_rm_patts(input_list, rm_patts)

        assert (
            result == expected_output
        ), "Failed to remove elements with specified patterns"

    # Should remove elements that contain multiple specified patterns
    def test_remove_elements_with_multiple_patterns(self):
        input_list = ["Hello", "World", "", "Hello, World"]
        rm_patts = ["World", "Hello"]
        expected_output = []

        result = clean_list_via_rm_patts(input_list, rm_patts, rm_empty_instrs=True)

        assert (
            result == expected_output
        ), "Failed to remove elements with multiple specified patterns"

    # Should not remove with wrong case (function is case insensitive)
    def test_remove_elements_with_wrong_case(self):
        input_list = ["Hello", "World", "", "Hello, world"]
        rm_patts = ["world"]
        expected_output = ["Hello", "World"]

        result = clean_list_via_rm_patts(input_list, rm_patts, rm_empty_instrs=True)

        assert result == expected_output, "Failed to remove elements with wrong case"

    # Should remove elements that contain specified patterns with control characters
    def test_remove_elements_with_control_characters(self):
        input_list = ["Hello", "World", "Hello, World", "Hello\tWorld"]
        rm_patts = ["\t"]
        expected_output = ["Hello", "World", "Hello, World"]

        result = clean_list_via_rm_patts(input_list, rm_patts)

        assert (
            result == expected_output
        ), "Failed to remove elements with control characters"

    # Should remove elements that contain specified patterns with Unicode characters
    def test_remove_elements_with_unicode_patterns(self):
        input_list = ["Hello", "World", "", "Hello, World", "こんにちは"]
        rm_patts = ["World", "こんにちは"]
        expected_output = ["Hello"]

        result = clean_list_via_rm_patts(input_list, rm_patts)

        assert (
            result == expected_output
        ), "Failed to remove elements with specified Unicode patterns"
