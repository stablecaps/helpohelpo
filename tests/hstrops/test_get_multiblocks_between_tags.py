# Generated by CodiumAI
import pytest

from helpo.hstrops import get_multiblocks_between_tags


class TestGetMultiblocksBetweenTags:
    # Should extract a single block of text between start and end tags
    def test_extract_single_block(self):
        filetext = "Hello\n:::\nWorld\n:::\nGoodbye"
        expected_output = [[":::", "World", ":::"]]
        assert (
            get_multiblocks_between_tags(filetext) == expected_output
        ), "Incorrect extraction of single block"

    # Should extract multiple blocks of text between start and end tags
    def test_extract_multiple_blocks(self):
        filetext = "Hello\n:::\nWorld\n:::\nGoodbye\n:::\nPython\n:::\nBye"
        expected_output = [[":::", "World", ":::"], [":::", "Python", ":::"]]
        assert (
            get_multiblocks_between_tags(filetext) == expected_output
        ), "Incorrect extraction of multiple blocks"

    # Should extract blocks of text with multiple lines between start and end tags
    def test_extract_blocks_with_multiple_lines(self):
        filetext = "Hello\n:::\nLine 1\nLine 2\nLine 3\n:::\nGoodbye"
        expected_output = [[":::", "Line 1", "Line 2", "Line 3", ":::"]]
        assert (
            get_multiblocks_between_tags(filetext) == expected_output
        ), "Incorrect extraction of blocks with multiple lines"

    # Should extract blocks of text with empty lines between start and end tags
    def test_extract_blocks_with_empty_lines(self):
        filetext = "Hello\n:::\n\nLine 1\n\nLine 2\n\n:::\nGoodbye"
        expected_output = [[":::", "", "Line 1", "", "Line 2", "", ":::"]]
        assert (
            get_multiblocks_between_tags(filetext) == expected_output
        ), "Incorrect extraction of blocks with empty lines"

    # Should return an empty list when no blocks are found
    def test_no_blocks_found(self):
        filetext = "Hello\nWorld\nGoodbye"
        expected_output = []
        assert (
            get_multiblocks_between_tags(filetext) == expected_output
        ), "Incorrect extraction when no blocks are found"

    # Should return an empty list when only start tag is found
    def test_only_start_tag_found(self):
        filetext = ":::\nHello\nWorld\nGoodbye"
        expected_output = []
        assert (
            get_multiblocks_between_tags(filetext) == expected_output
        ), "Incorrect extraction when only start tag is found"

    # Should return an empty list when only end tag is found
    def test_only_end_tag_found(self):
        filetext = "Hello\nWorld\nGoodbye\n:::"
        expected_output = []
        assert (
            get_multiblocks_between_tags(filetext) == expected_output
        ), "Incorrect extraction when only end tag is found"

    # Should return [[':::', 'World', ':::']] when start and end tags are found in reverse order
    def test_reverse_order_same_tags(self):
        filetext = "Hello\n:::\nWorld\n:::\nGoodbye"
        expected_output = [[":::", "World", ":::"]]
        assert (
            get_multiblocks_between_tags(filetext, end_tag=":::", start_tag=":::")
            == expected_output
        ), "Incorrect extraction when start and end tags are in reverse order if tags are same"

    def test_reverse_order_diff_tags(self):
        filetext = "Hello\n:::\nWorld\n@@@\nGoodbye"
        expected_output = []
        assert (
            get_multiblocks_between_tags(filetext, end_tag=":::", start_tag="@@@")
            == expected_output
        ), "Incorrect extraction when start and end tags are in reverse order and tags are different"
