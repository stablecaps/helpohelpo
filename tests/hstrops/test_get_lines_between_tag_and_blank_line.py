# Generated by CodiumAI

from helpo.hstrops import get_lines_between_tag_and_blank_line


class TestGetLinesBetweenTagAndBlankLine:
    # Should return an empty list when there is no start tag in the filetext
    def test_no_start_tag(self):
        filetext = "Hello\nWorld\nGoodbye"
        result = get_lines_between_tag_and_blank_line(filetext)
        assert result == [], "Expected an empty list"

    # Should return a list with only the start tag and the blank line when there is no text between them
    def test_no_text_between_tags(self):
        filetext = "Hello\n@@@\n\nGoodbye"
        result = get_lines_between_tag_and_blank_line(filetext, start_tag="@@@")
        assert result == [
            "@@@",
            "",
        ], "Expected a list with only the start tag and the blank line"

    # Should return a list with the start tag and all lines until the next blank line
    def test_text_between_tags(self):
        filetext = "Hello\n@@@\nWorld\n\nGoodbye"
        result = get_lines_between_tag_and_blank_line(filetext, start_tag="@@@")
        assert result == [
            "@@@",
            "World",
            "",
        ], "Expected a list with the start tag and all lines until the next blank line"

    # Should return a list with the start tag and all lines until the end of the filetext
    def test_text_until_end(self):
        filetext = "Hello\n@@@\nWorld\nGoodbye"
        result = get_lines_between_tag_and_blank_line(filetext, start_tag="@@@")
        assert result == [
            "@@@",
            "World",
            "Goodbye",
        ], "Expected a list with the start tag and all lines until the end of the filetext"

    # Should handle start tags with different formats
    def test_different_start_tags(self):
        filetext = "Hello\n```{toc}\nWorld\n\nGoodbye"
        result = get_lines_between_tag_and_blank_line(filetext, start_tag="```{toc}")
        assert result == [
            "```{toc}",
            "World",
            "",
        ], "Expected a list with the start tag and all lines until the next blank line"

    # Should handle filetext with only one line
    def test_one_line_filetext(self):
        filetext = "Hello"
        result = get_lines_between_tag_and_blank_line(filetext, start_tag="@@@")
        assert result == [], "Expected an empty list"

    # Should handle filetext with only one line containing the start tag
    def test_one_line_start_tag(self):
        filetext = "@@@"
        result = get_lines_between_tag_and_blank_line(filetext, start_tag="@@@")
        assert result == ["@@@"], "Expected a list with only the start tag"

    # Should handle filetext with only one line containing the blank line
    def test_one_line_blank_line(self):
        filetext = ""
        result = get_lines_between_tag_and_blank_line(filetext, start_tag="@@@")
        assert result == [], "Expected an empty list"
